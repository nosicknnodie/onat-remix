generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id         String   @id @default(cuid())
  url        String
  mimeType   String
  purpose    FilePurposeType  @default(PROFILE)
  size       Int
  uploaderId String?
  uploader   User?  @relation("UploadedImages", fields: [uploaderId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())
  owner      User[] @relation("UserImage")
  clubImages      Club[] @relation("ClubImage")
  clubEmblems      Club[] @relation("ClubEmblem")

}

enum FilePurposeType {
  PROFILE
  CLUB_IMAGE
  CLUB_EMBLEM
  POST_IMAGE
  MATCH_PHOTO
  DOCUMENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?

  userImageId   String? // 현재 설정된 프로필 이미지
  userImage     File? @relation("UserImage", fields: [userImageId], references: [id])
  uploadedImages   File[] @relation("UploadedImages")
  playerNative  PlayerNativeType? // 선출 중등 고등 대학 프로
  height        Int?       // 키
  birth         String?    // 생일
  gender        GenderType? // 성별
  position1     PositionType?
  position2     PositionType?
  position3     PositionType?
  si            String?     // 도시 (시도)
  gun           String?     // 지역 (시군구)
  clothesSize   String?        // 옷 사이즈
  shoesSize     String?        // 신발 사이즈

  ownerClubs    Club[]  @relation("ClubOwnerUser")
  createClubs   Club[]  @relation("ClubCreateUser")
  players       Player[]
  // toProposals   Proposal[]  @relation("toProposal")
  // fromProposals Proposal[]  @relation("fromProposal")
  mercenarys    Mercenary[]
  // applications  Application[]
  playerLogs    PlayerLog[]
  comments      Comment[]
  matchs        Match[]
  evaluations   Evaluation[]

  session Session[]
  key     Key[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  
  @@map("users")
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum PlayerNativeType {
  NO          // 비선출
  MIDDLE      // 중등
  HIGH        // 고등
  COLLEAGE    // 대학
  PRO         // 프로
}

enum GenderType {
  MALE    // 남자
  FEMALE  // 여자
}


model ConfirmToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  type  TokenType @default(VERIFICATION)
  @@unique([email, token, type])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Key {
  id              String  @id
  hashedPassword String?
  userId          String
  user            User    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([id])
} 


model Club {
  id            String    @id @default(cuid())
  name          String    // 클럽 이름
  description   String?   @db.Text
  si            String?   // 도시
  gun           String?   // 지역
  imageId       String?   // 클럽 이미지
  emblemId      String?   // 엠블럼 URL
  image         File?      @relation("ClubImage",fields: [imageId], references: [id], onDelete: SetNull)
  emblem        File?      @relation("ClubEmblem",fields: [emblemId], references: [id], onDelete: SetNull)


  isPublic      Boolean?  @default(false)
  ownerUserId  String?
  ownerUser    User?      @relation("ClubOwnerUser",fields: [ownerUserId], references: [id], onDelete: SetNull)
  createUserId  String?
  createUser    User?     @relation("ClubCreateUser",fields: [createUserId], references: [id], onDelete: SetNull)
  players       Player[]      // 회원 선수
  matchClubs    MatchClub[]       // 매치
  mercenarys    Mercenary[]     // 용병
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  @@index([createUserId])

}


enum JobTitle {
  CHAIRMAN      // 회장
  VICE_CHAIRMAN // 부회장
  DIRECTOR      // 감독
  COACH         // 코치
  OPERATOR      // 운영
  ADVISER       // 고문
  NO            // 없음
}

model Mercenary {
  id              String    @id @default(cuid())
  name            String
  hp              String?
  description     String?
  position1       PositionType?
  position2       PositionType?
  position3       PositionType?

  clubId          String                 // 🔄 클럽 직접 연결
  club            Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)

  userId          String?
  user            User?  @relation(fields: [userId], references: [id], onDelete: SetNull)       
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  
  attendances      Attendance[]

  @@index([userId])
  @@unique([userId, clubId])
}

model Player {
  id              String    @id @default(cuid())
  nick            String
  userId          String?
  jobTitle        JobTitle? @default(NO)
  role            RoleType  @default(PENDING)
  clubId          String

  isInjury        Boolean  @default(false)
  isRest          Boolean  @default(false)
  // isExit          Boolean  @default(false)
  status          StatusType @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  club            Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  attendances     Attendance[]
  playerLogs      PlayerLog[]

  @@index([clubId])
  @@index([userId])
  @@unique([clubId, userId])
}

enum StatusType {
  PENDING
  APPROVED
  REJECTED
  LEFT
  BANNED
}

enum RoleType {
  MASTER
  MANAGER
  NORMAL
  PENDING
}

enum PlayerLogType {
  STATUS      // 가입, 탈퇴
  REST        // 휴식기
  INJURY      // 부상
  ROLE        // 역할
  JOB_TITLE   // 직책
}
enum PlayerLogValue {
  START     // 시작
  END       // 종료
  CHANGED   // 변경
}

model PlayerLog {
  id              String    @id @default(cuid())
  playerId        String
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  type            PlayerLogType?
  value           PlayerLogValue?
  from            String?
  to              String?
  createUserId    String?
  createUser      User?   @relation(fields: [createUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@index([playerId])
  @@index([createUserId])
}




model Match {
  id              String        @id @default(cuid())
  
  title           String
  description     String     @db.Text
  placeName       String?
  address         String?
  lng             Float?      
  lat             Float?     
  stDate          DateTime
  
  matchClubs      MatchClub[]
  createUserId    String?
  createUser      User?    @relation(fields: [createUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

}

model MatchClub {
  id            String        @id @default(cuid())
  matchId       String        
  match         Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)
  clubId        String
  club          Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  isSelf        Boolean       @default(false)   // 자체전 여부
  attendances   Attendance[]
  quarters      Quarter[]
  teams         Team[]
  evaluations   Evaluation[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@index([clubId])
  @@index([matchId])
  @@unique([matchId, clubId])
}

model Team {
  id              String  @id @default(cuid())
  seq             Int @default(0)
  name            String
  color           String

  quartersAsTeam1        Quarter[] @relation("QuarterTeam1")
  quartersAsTeam2        Quarter[] @relation("QuarterTeam2")
  
  attendances     Attendance[]
  matchClubId         String
  matchClub           MatchClub @relation(fields: [matchClubId], references: [id], onDelete: Cascade)
  assigned        Assigned[]
  goals           Goal[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  @@index([matchClubId])
}

enum AttendanceState {
  NORMAL    // 기본값
  EXCUSED   // 불참.
  RETIRED   // 떠남.
}

model Attendance {
  id          String    @id @default(cuid())
  isVote      Boolean   @default(false)   // 참석투표 여부
  voteTime    DateTime?                   // 참석투표 시간

  isCheck     Boolean   @default(false)   // 출석체크
  checkTime   DateTime?                   // 출석체크 시간

  state       AttendanceState @default(NORMAL)
  
  playerId        String?   // 선수 fkey
  mercenaryId     String?   // 용병 fkey
  matchClubId     String    // 매치 fkey
  teamId          String?   // 팀 fkey

  player      Player?     @relation(fields: [playerId], references: [id], onDelete: SetNull)
  mercenary   Mercenary?  @relation(fields: [mercenaryId], references: [id], onDelete: SetNull)
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: SetNull)
  matchClub   MatchClub       @relation(fields: [matchClubId], references: [id], onDelete: Cascade)

  assigneds   Assigned[]
  evaluations Evaluation[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([playerId])
  @@index([teamId])
  @@index([matchClubId])
  @@index([mercenaryId])
  @@unique([matchClubId, mercenaryId])
  @@unique([matchClubId, playerId])
}

// 쿼터정보
model Quarter {
  id            String    @id @default(cuid())
  order         Int
  isSelf        Boolean   @default(false)
  // 자체전일 경우에만 설정
  team1Id    String?
  team2Id    String?
  team1      Team? @relation("QuarterTeam1", fields: [team1Id], references: [id], onDelete: SetNull)
  team2      Team? @relation("QuarterTeam2", fields: [team2Id], references: [id], onDelete: SetNull)


  matchClubId       String
  matchClub         MatchClub     @relation(fields: [matchClubId], references: [id], onDelete: Cascade)
  assigneds      Assigned[]
  goals       Goal[]
  
  @@index([matchClubId])
}

// 쿼터 등록 선수 정보 (쿼터별 선수 포지션)
model Assigned {
  id            String    @id @default(cuid())
  position      PositionType
  quarterId     String
  attendanceId  String 
  teamId        String?
  team          Team?       @relation(fields: [teamId], references: [id], onDelete: SetNull)
  quarter       Quarter     @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  attendance    Attendance  @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  goals         Goal[]     
  asists        Goal[]  @relation("AssistAssigned")

  @@index([attendanceId])
  @@index([quarterId])
  @@index([teamId])
  @@unique([quarterId, attendanceId])

}


// 코멘트
model Comment {
  id            String    @id @default(cuid())
  content       String    @db.Text
  isDeleted     Boolean   @default(false)

  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId      String
  targetType    CommentTargetType
  parentId      String?
  parentComment Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replys        Comment[] @relation("CommentToComment")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@index([targetId, targetType])
  @@index([userId])
  @@index([parentId])

}

enum CommentTargetType {
  MATCH_CLUB
}

enum PositionType {
  LS
  ST
  RS
  LW
  LF
  CF
  RF
  RW
  LAM
  CAM
  RAM
  LM
  LCM
  CM
  RCM
  RM
  LWB
  LDM
  DM
  RDM
  RWB
  LB
  LCB
  SW
  RCB
  RB
  GK
}


model Goal {
  id            String   @id @default(cuid())

  assignedId    String
  assigned      Assigned @relation(fields: [assignedId], references: [id], onDelete: Cascade)

  assistAssignedId String?  // 어시스트도 Assigned 기반으로 추적
  assistAssigned   Assigned? @relation("AssistAssigned", fields: [assistAssignedId], references: [id], onDelete: SetNull)
  
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)

  quarterId     String
  quarter       Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)

  isOwnGoal     Boolean   @default(false)
  goalType      GoalType @default(NORMAL)

  createdAt     DateTime  @default(now())

  @@index([assignedId])
  @@index([assistAssignedId])
}

enum GoalType {
  NORMAL
  PK
  HEADER
  OWNGOAL
}

// 평가
model Evaluation {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  attendanceId   String
  attendance     Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  matchClubId    String
  matchClub      MatchClub @relation(fields: [matchClubId], references: [id], onDelete: Cascade)

  score          Int      @default(0)       // 0~60 중 하나
  liked          Boolean  @default(false)   // 좋아요 여부

  createdAt      DateTime @default(now())

  @@unique([userId, matchClubId, attendanceId])
}